orderEntryType = 'module-library'
gradleLibraryId = 'Gradle Libraries'
gradleTestLibraryId = 'Gradle Test Libraries'

task intellijSync << {

        // change this to the name of your module file
        def moduleFileName = "sham.iml"
        def root = new XmlParser().parse(moduleFileName)
        def newModuleRootManager = root.component.find {it.'@name' == 'NewModuleRootManager'}

        // if there is already a module library in place we should remove it
        removeOldOrderEntry(newModuleRootManager, gradleLibraryId)
        removeOldOrderEntry(newModuleRootManager, gradleTestLibraryId)

        // add the new module library with our current gradle dependencies
        addNewOrderEntry(newModuleRootManager, gradleLibraryId)
        addNewOrderEntry(newModuleRootManager, gradleTestLibraryId, 'testCompile', 'TEST')

        // output the .iml XML
        def writer = new StringWriter()
        new XmlNodePrinter(new PrintWriter(writer)).print(root)
        def result = writer.toString()
        print result

        // overwrite our old .iml file
        def moduleFile = new File(moduleFileName)
        moduleFile.text = result
}

private def addNewOrderEntry(newModuleRootManager, name, configuration = 'compile', scope = null) {
        def newOrderEntry = newModuleRootManager.appendNode('orderEntry', [type: orderEntryType])
        if (scope) {
                newOrderEntry.@scope = scope
        }
        def newGradleLibrary = newOrderEntry.appendNode('library', [name: name])
        def classesNode = newGradleLibrary.appendNode('CLASSES')

        def path = configurations[configuration].asPath
        def jars = path.split(File.pathSeparator)
        jars.each { jar ->
                classesNode.appendNode('root', [url: "jar://$jar!/"])
        }
}

private def removeOldOrderEntry(newModuleRootManager, name) {
        def oldOrderEntry = newModuleRootManager.orderEntry.find {
                (it.'@type' == orderEntryType) && (it.library[0].'@name' == name)
        }
        if (oldOrderEntry) {
                newModuleRootManager.remove(oldOrderEntry)
        }
}